/* ========================================================================
 * Copyright 2014 Escher96
 *
 * Licensed under the MIT, The MIT License (MIT)
 * Copyright (c) 2014 Escher96

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
 * ========================================================================


Source generated by CrudMaker version 1.0.0.201410152247

*/

package co.edu.uniandes.csw.Escher96.imagen.logic.ejb;

import javax.inject.Inject;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.transaction.UserTransaction;

import org.jboss.arquillian.container.test.api.Deployment;
import org.jboss.arquillian.junit.Arquillian;
import org.jboss.shrinkwrap.api.ShrinkWrap;
import org.jboss.shrinkwrap.api.spec.WebArchive;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import java.util.*;


import co.edu.uniandes.csw.Escher96.imagen.logic.dto.ImagenPageDTO;
import co.edu.uniandes.csw.Escher96.imagen.logic.dto.ImagenDTO;
import co.edu.uniandes.csw.Escher96.imagen.logic.api.IImagenLogicService;
import co.edu.uniandes.csw.Escher96.imagen.persistence.ImagenPersistence;
import co.edu.uniandes.csw.Escher96.imagen.persistence.api.IImagenPersistence;
import co.edu.uniandes.csw.Escher96.imagen.persistence.entity.ImagenEntity;
import co.edu.uniandes.csw.Escher96.imagen.persistence.converter.ImagenConverter;
import static co.edu.uniandes.csw.Escher96.util._TestUtil.*;

@RunWith(Arquillian.class)
public class ImagenLogicServiceTest {

	public static final String DEPLOY = "Prueba";

	@Deployment
	public static WebArchive createDeployment() {
		return ShrinkWrap.create(WebArchive.class, DEPLOY + ".war")
				.addPackage(ImagenLogicService.class.getPackage())
				.addPackage(IImagenLogicService.class.getPackage())
				.addPackage(ImagenPersistence.class.getPackage())
				.addPackage(ImagenEntity.class.getPackage())
				.addPackage(IImagenPersistence.class.getPackage())
                .addPackage(ImagenDTO.class.getPackage())
                .addPackage(ImagenConverter.class.getPackage())
                .addPackage(ImagenEntity.class.getPackage())
				.addAsResource("META-INF/persistence.xml", "META-INF/persistence.xml")
                .addAsWebInfResource("META-INF/beans.xml", "beans.xml");
	}

	@Inject
	private IImagenLogicService imagenLogicService;
	
	@Inject
	private IImagenPersistence imagenPersistence;	

	@Before
	public void configTest() {
		try {
			clearData();
			insertData();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private void clearData() {
		List<ImagenDTO> dtos=imagenPersistence.getImagens();
		for(ImagenDTO dto:dtos){
			imagenPersistence.deleteImagen(dto.getId());
		}
	}

	private List<ImagenDTO> data=new ArrayList<ImagenDTO>();

	private void insertData() {
		for(int i=0;i<3;i++){
			ImagenDTO pdto=new ImagenDTO();
			pdto.setName(generateRandom(String.class));
			pdto.setUrl(generateRandom(String.class));
			pdto=imagenPersistence.createImagen(pdto);
			data.add(pdto);
		}
	}
	
	@Test
	public void createImagenTest(){
		ImagenDTO ldto=new ImagenDTO();
		ldto.setName(generateRandom(String.class));
		ldto.setUrl(generateRandom(String.class));
		
		
		ImagenDTO result=imagenLogicService.createImagen(ldto);
		
		Assert.assertNotNull(result);
		
		ImagenDTO pdto=imagenPersistence.getImagen(result.getId());
		
		Assert.assertEquals(ldto.getName(), pdto.getName());	
		Assert.assertEquals(ldto.getUrl(), pdto.getUrl());	
	}
	
	@Test
	public void getImagensTest(){
		List<ImagenDTO> list=imagenLogicService.getImagens();
		Assert.assertEquals(list.size(), data.size());
        for(ImagenDTO ldto:list){
        	boolean found=false;
            for(ImagenDTO pdto:data){
            	if(ldto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
	}
	
	@Test
	public void getImagenTest(){
		ImagenDTO pdto=data.get(0);
		ImagenDTO ldto=imagenLogicService.getImagen(pdto.getId());
        Assert.assertNotNull(ldto);
		Assert.assertEquals(pdto.getName(), ldto.getName());
		Assert.assertEquals(pdto.getUrl(), ldto.getUrl());
        
	}
	
	@Test
	public void deleteImagenTest(){
		ImagenDTO pdto=data.get(0);
		imagenLogicService.deleteImagen(pdto.getId());
        ImagenDTO deleted=imagenPersistence.getImagen(pdto.getId());
        Assert.assertNull(deleted);
	}
	
	@Test
	public void updateImagenTest(){
		ImagenDTO pdto=data.get(0);
		
		ImagenDTO ldto=new ImagenDTO();
		ldto.setId(pdto.getId());
		ldto.setName(generateRandom(String.class));
		ldto.setUrl(generateRandom(String.class));
		
		
		imagenLogicService.updateImagen(ldto);
		
		
		ImagenDTO resp=imagenPersistence.getImagen(pdto.getId());
		
		Assert.assertEquals(ldto.getName(), resp.getName());	
		Assert.assertEquals(ldto.getUrl(), resp.getUrl());	
	}
	
	@Test
	public void getImagenPaginationTest(){
		
		ImagenPageDTO dto1=imagenLogicService.getImagens(1,2);
		Assert.assertNotNull(dto1);
        Assert.assertEquals(dto1.getRecords().size(),2);
        Assert.assertEquals(dto1.getTotalRecords().longValue(),3L);
		
		
		ImagenPageDTO dto2=imagenLogicService.getImagens(2,2);
		Assert.assertNotNull(dto2);
        Assert.assertEquals(dto2.getRecords().size(),1);
        Assert.assertEquals(dto2.getTotalRecords().longValue(),3L);
		
		for(ImagenDTO dto:dto1.getRecords()){
        	boolean found=false;
            for(ImagenDTO pdto:data){
            	if(dto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
        
        for(ImagenDTO dto:dto2.getRecords()){
        	boolean found=false;
            for(ImagenDTO pdto:data){
            	if(dto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
        
        ImagenPageDTO dto3=imagenLogicService.getImagens(1,3);
		Assert.assertNotNull(dto3);
        Assert.assertEquals(dto3.getRecords().size(),data.size());
        Assert.assertEquals(dto3.getTotalRecords().longValue(),data.size());
		
		for(ImagenDTO dto:dto3.getRecords()){
        	boolean found=false;
            for(ImagenDTO pdto:data){
            	if(dto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
	}
	
	
}